
class Node:
   def __init__(self,value) -> None:
      self.next = None
      self.value = value

class linkedlist:
   def __init__(self) -> None:
      self.head = None
      self.tail = None
      self.size = 0
   def AddNode(self,value):# to add node
      #creat node
      node= Node(value)
      #if empty linkedlist
      if self.size==0:        
         self.head = node
         self.tail = self.head
         self.size +=1
      #if not empty linkedlist   
      else:
         #store head node to browse the linkedlist        
         current = self.head
         #loop to add nodes
         while current.next:
            current=current.next
         current.next = node
         #to point last node
         self.tail = current
         #increase size
         self.size += 1
      print("A new node  successfully added..")  
   def Display(self):# display info of linkedlist  nodes
        #if empty
        if self.size == 0:
            print("Empty list...")
        else:
            #if not empty
            current = self.head
            #loop while current is not none
            while current != None:
                #display result
                print(current.value,end = " -> ")
                
                current = current.next
            print("None") 
   def SearchDelete(self,value):
        counter = 0
        current = self.head
        # If size is zero the it is empty linkedlist
        if self.size == 0:
           print("Empty list...") 
           return
        else:   
         
            #Count occurrence and delete  all
            
            while current is not None:
                if current.value == value:
                        counter += 1
                    
                current = current.next 
            
            if counter == 0 :
                print(f"{value} doesnot exist")
                return
            

        while counter > 0:
                # Store head node 
                temp = self.head 
        
                # If head node itself holds the key to be deleted 
                if (temp is not None): 
                    if (temp.value == value): 
                        self.head = temp.next
                        temp = None
                        return
        
                # Search for the key to be deleted, keep track of the 
                # previous node as we need to change 'prev.next' 
                while(temp is not None): 
                    if temp.value == value: 
                        break
                    prev = temp 
                    temp = temp.next
                    
        
                
                counter -=1  
                # Unlink the node from linked list 
                prev.next = temp.next
        
                temp = None
                self.size -=1
        print("{} has been deleted".format(value))
                    
                
            
        
#call funtion to create linkedlist   
def SinglyLinkedList():
    #instance of linkedlist class..
    ll = linkedlist()
    while True:
        #Display sub-menu
        print("a. Add Node\nb. Display Nodes\nc. Search for & Delete Node\nd. Return to main menu")
        #Ask user to enter letter and change  it to lowercase
        user_sub_choice = input("Please, Choose letter from following:").lower()
        if user_sub_choice == "a":
            #Ask user to enter number to be added to the linkedlist
            user_input=int(input("Enter number to be added: "))
            #Call AddNode method 
            ll.AddNode(user_input)
            
        elif user_sub_choice == "b":
            ll.Display() 
        elif user_sub_choice == "c":
            #Ask user to enter the value want to delete
           value_delete = int(input("Please, eneter the value to be deleted: "))
           ll.SearchDelete(value_delete)
         #Back to main menu   
        elif user_sub_choice == "d":
            MainMenu()
            break
        else:
            print("choose from the above options(a,b,c and d)")
            
def CheckIfPalindrome(string):
   stack = []
   queue = []
    #push store string in stack and queue
   for char in string:
        stack.append(char)
        queue.append(char)
    # check if palindorme
   while stack:
      #stack pop last element
      #dequeue 
      if  stack.pop() != queue.pop(0):
        
         print(f"{string} is not palindrom")
         return
      
   print(f"{string} is palindrome")
# class PQueue:
#       def __init__(self):
#         self.head = None
        
#         self.size = 0
      
#       def Enqueue(self,student):
        
#        pass
        

# class Student:
#     def __init__(self,name,mid_grade,final_grade,good_attitude):
#         self.name = name
#         self.mid_grade = mid_grade
#         self.final_grade = final_grade
#         self.good_attitude = good_attitude
   
        
        
         
   
    
             
# def PriorityQueue():
#     print("a. Add a student\nb. Interview a student\nc. Return to main menu")
#     while True:
#       user_choice = input("choose from the option below: ").lower()
#       if user_choice == 'a':
         
#         #Ask the user enter student characteristics
#         #Handle user input
         
#             name = input("Enter student full name: ")
            
#             mid_grade = int(input("Enter student midterms grade (/100): "))
#             while mid_grade < 0 or mid_grade > 100:
#                print("PLease, Enter vaild grade")
#                mid_grade = int(input("Enter student midterms grade (/100): "))
#             final_grade = int(input("Enter student final grade (/100): "))
#             while final_grade < 0 or final_grade > 100:
#                print("PLease, Enter vaild grade")
#                final_grade = int(input("Enter student final grade (/100): "))
               
#             good_attitude=input("Eneter T or F :").lower()
#             while good_attitude != 't' and good_attitude != 'f':
#                print("please enter T or F")
#                good_attitude = input("Eneter T or F :").lower()

#             if good_attitude == 't':
                     
#                      good_attitude = True
#             else:
#                      good_attitude == False

            
#             #Student instance  
               
#             student1 = Student(name,mid_grade,final_grade,good_attitude)
            
#             queue = PQueue()
#             queue.Enqueue(student1)
         
#       elif user_choice == 'b':
#         pass
#       elif user_choice == 'c':
#         MainMenu()
#         break
#       else:
#           print("PLEASE choose OPTION from menu (a,b or c) ")
class Stack:
  #create empty list
  def __init__(self):
      self.items = []
  #check if empty
  def is_empty(self):
      return self.items == []
#adding items to list
  def push(self, item):
      self.items.append(item)
#remove items from list
  def pop(self):
      return self.items.pop()
#display last item
  def peek(self):
      return self.items[-1]
#give size of list
  def size(self):
      return len(self.items)
  
def EvaluateExpression(expression):
  #put precedence for  operators 
  def precedence(operator):
      
      if operator in ['+', '-']:
          return 1
      elif operator in ['*', '/']:
          return 2
      else:
          return 0

  def apply_operator(operators, numbers):
      operator = operators.pop()
      right_operand = numbers.pop()
      left_operand = numbers.pop()
      if operator == '+':
          numbers.push(left_operand + right_operand)
      elif operator == '-':
          numbers.push(left_operand - right_operand)
      elif operator == '*':
          numbers.push(left_operand * right_operand)
      elif operator == '/':
          numbers.push(left_operand / right_operand)
#create stack to store numbers
  numbers_stack = Stack()
#create stack to store operators
  operators_stack = Stack()
  i = 0

  while i < len(expression):
      #if it is digit store it on stack of number
      if expression[i].isdigit():
          number = 0
          while i < len(expression) and expression[i].isdigit():
              number = number * 10 + int(expression[i])
              i += 1
          numbers_stack.push(number)
      #if operator store it on operator stack
      elif expression[i] in ['+', '-', '*', '/']:
          while (not operators_stack.is_empty() and
                 precedence(operators_stack.peek()) >= precedence(expression[i])):
              apply_operator(operators_stack, numbers_stack)
          operators_stack.push(expression[i])
          i += 1
      #if it is  opened brackets push to operator stack
      elif expression[i] == '(':
          operators_stack.push(expression[i])
          i += 1
      # if it is closed brackets check the stack operator if not empty and last item is not opened brackets
      elif expression[i] == ')':
          while not operators_stack.is_empty() and operators_stack.peek() != '(':
              #call apply operator function
              apply_operator(operators_stack, numbers_stack)
          operators_stack.pop()
          i += 1
      else:
          i += 1

  while not operators_stack.is_empty():
      apply_operator(operators_stack, numbers_stack)

  return numbers_stack.pop()

class Graphs:
    #create empty dict
    def __init__(self) -> None:
        self.adj_list ={}
    
    def AddVertex(self,vertex):
        #if vertex doesnot exist
        if vertex not in self.adj_list:
            #store empty linkedlist to the vertex 
            #Each vertex is key
            
            self.adj_list[vertex] = linkedlist()
            return
        print("Vertex",vertex,"already exists\n")
    
    def AddEdge(self,vertex1,vertex2):
        #check if vertex is not in list
        if vertex1 in self.adj_list and vertex2 in self.adj_list:
           #create edge between vertices
           self.adj_list[vertex1].AddNode (vertex2)
           self.adj_list[vertex2].AddNode(vertex1)
        #if both vertices not exist  
        elif vertex1 not in self.adj_list and vertex2 not in self.adj_list:
            print("Vertices",vertex1,"and",vertex2,"not exist")
        #To specify which vertex doesnot exist(v1 or v2)
        elif vertex1 not in self.adj_list:
            print("Vertex",vertex1,"doesnot exist")
        else:
            print("Vertex",vertex2,"doesnot exist")
    #Display graph : used to visualize edges and vertices
    def DisplayGraph(self):
        #if graph is empty
        if self.adj_list == {}:
         print("Graph is empty!\n")
         return
        #loop to show every vertex with its edge 
        for vertex in self.adj_list:  
            print(vertex + ":", end=" ")
            self.adj_list[vertex].Display() 
    def RemoveVertex(self,vertex):
        
        self.adj_list[vertex].pop()

def Graph(graph):
   
   print("a. Add vertex\nb. Add edge\nc. Remove vertex\nd. Remove edge\ne. Display vertices with a degree of X or more.\nf. Return to main menu")
   user_choice = input("Choose from the options above: ").lower()

   while True:
        if user_choice == 'a':
           #number_vertex = int(input("How many vertex do you want to add: "))
           vertex_name = input("Enter name of vertex to be added:")
           
           graph.AddVertex(vertex_name)
   
        elif user_choice =='b':
          
          vertex1 = input("Enter name of first vertex: ")
          vertex2 = input("Enter name of second vertex: ")
          graph.AddEdge(vertex1,vertex2)
          print("Edge successfully added ({})".format(graph.DisplayGraph()))
        elif user_choice =='c':
           vertex = input("Enter the name of vertex you want to remove: ")
           graph.RemoveVertex(vertex)
        elif user_choice == 'd':
            RemoveEdge()
        elif user_choice == 'e':
           DisplayVerticesDEgree()
        elif user_choice == 'f':
             return  MainMenu()
           
        else:
           print("Please choose a letter from a to f")
           
#Manin menu function        
def MainMenu():
   i=4
   while 0<i<= 4:
     print("1. Singly Linked List\n2. Check if Palindrome\n3. Priority Queue\n4. Evaluate an Infix Expression\n5. Graph\n6. Exit")
     #Ask user to choose number between 1 and 6
     user_choice = int(input("Choose an option from the menu by choosing number between 1 and 6: "))
     #looping user input 
     if 0 < user_choice <=6:
        if user_choice == 1:
           SinglyLinkedList()
           break
        elif user_choice == 2:
           string=input("Enter string to check if palindrome: ").replace(" ","").lower()
           CheckIfPalindrome(string)
           MainMenu()
        elif user_choice == 3:
           PriorityQueue()
        elif user_choice == 4:
           expression = input("Enter expression to be solved: ")
           result = EvaluateExpression(expression)
           print("The result is : ",result)
           MainMenu()
        elif user_choice == 5:
           graph = Graphs()
           Graph(graph)
        elif user_choice == 6:
           #Exit  the main menu
           #emoji code from(https://www.geeksforgeeks.org/python-program-to-print-emojis/)
           print("Goodbye, Have a nice day \U0001f600")
        break
     else:
        print("Please enter number between 1 and 6 (1-6):")
     i-=1
     print("Remaining attempts is " , i)
     
#The main function        
def main():
    #Ask user to enter his/her name
    User_name = input("Please, Enter your name: ")
    print("______Welcome, {}______\n".format(User_name))
    #Call MainMenu function
    MainMenu()

#Call main function to be executed
main()