class Node:
   def __init__(self,value) -> None:
      self.next = None
      self.value = value

class linkedlist:
   def __init__(self) -> None:
      self.head = None
      self.tail = None
      self.size = 0
   def AddNode(self,value):# to add node
      #creat node
      node= Node(value)
      #if empty linkedlist
      if self.size==0:        
         self.head = node
         self.tail = self.head
         self.size +=1
      #if not empty linkedlist   
      else:
         #store head node to browse the linkedlist        
         current = self.head
         #loop to add nodes
         while current.next:
            current=current.next
         current.next = node
         #to point last node
         self.tail = current
         #increase size
         self.size += 1
      print("A new node  successfully added..")  
   def Display(self):# display info of linkedlist  nodes
        #if empty
        if self.size == 0:
            print("Empty list...")
        else:
            #if not empty
            current = self.head
            #loop while current is not none
            while current != None:
                #display result
                print(current.value,end = " -> ")
                
                current = current.next
            print("None") 
   def SearchDelete(self):
        counter = 0
        current = self.head
        # If size is zero the it is empty linkedlist
        if self.size == 0:
           print("Empty list...") 
        else:
           #Ask user to enter the value want to delete
           value_delete = int(input("Please, eneter the value to be deleted: "))
           self.value = value_delete
           
         #If the value at head node
        if self.head.value==value_delete:
               self.head = current.next
               current = current.next
         #Count occurrence and delete  all
        
        while current is not None:
           if current.value == value_delete:
                 counter += 1
               
                 tmp = current
                 tmp.next = None
           current = current.next 
        else: 
               self.head.next = current 
           
               current = current.next 
                          
        print("The value deleted successfully...",counter)
              
              
           #If value doesnot exist
        if counter == 0:
            print("Value doesnot exist...")   
#call funtion to create linkedlist   
def SinglyLinkedList():
    #instance of linkedlist class..
    ll = linkedlist()
    while True:
        #Display sub-menu
        print("a. Add Node\nb. Display Nodes\nc. Search for & Delete Node\nd. Return to main menu")
        #Ask user to enter letter and change  it to lowercase
        user_sub_choice = input("Please, Choose letter from following:").lower()
        if user_sub_choice == "a":
            #Ask user to enter number to be added to the linkedlist
            user_input=int(input("Enter number to be added: "))
            #Call AddNode method 
            ll.AddNode(user_input)
            
        if user_sub_choice == "b":
            ll.Display() 
        if user_sub_choice == "c":
            
            ll.SearchDelete()
         #Back to main menu   
        if user_sub_choice == "d":
            MainMenu()
            break
            
def CheckIfPalindrome(string):
   stack = []
   queue = []
    #push store string in stack and queue
   for char in string:
        stack.append(char)
        queue.append(char)
    # check if palindorme
   while stack:
      #stack pop last element
      #dequeue 
      if  stack.pop() != queue.pop(0):
        
         print(f"{string} is not palindrom")
         return
      
   print(f"{string} is palindrome")
# class PQueue:
#       def __init__(self):
#         self.head = None
        
#         self.size = 0
      
#       def Enqueue(self,student):
        
#        pass
        

# class Student:
#     def __init__(self,name,mid_grade,final_grade,good_attitude):
#         self.name = name
#         self.mid_grade = mid_grade
#         self.final_grade = final_grade
#         self.good_attitude = good_attitude
   
        
        
         
   
    
             
# def PriorityQueue():
#     print("a. Add a student\nb. Interview a student\nc. Return to main menu")
#     while True:
#       user_choice = input("choose from the option below: ").lower()
#       if user_choice == 'a':
         
#         #Ask the user enter student characteristics
#         #Handle user input
         
#             name = input("Enter student full name: ")
            
#             mid_grade = int(input("Enter student midterms grade (/100): "))
#             while mid_grade < 0 or mid_grade > 100:
#                print("PLease, Enter vaild grade")
#                mid_grade = int(input("Enter student midterms grade (/100): "))
#             final_grade = int(input("Enter student final grade (/100): "))
#             while final_grade < 0 or final_grade > 100:
#                print("PLease, Enter vaild grade")
#                final_grade = int(input("Enter student final grade (/100): "))
               
#             good_attitude=input("Eneter T or F :").lower()
#             while good_attitude != 't' and good_attitude != 'f':
#                print("please enter T or F")
#                good_attitude = input("Eneter T or F :").lower()

#             if good_attitude == 't':
                     
#                      good_attitude = True
#             else:
#                      good_attitude == False

            
#             #Student instance  
               
#             student1 = Student(name,mid_grade,final_grade,good_attitude)
            
#             queue = PQueue()
#             queue.Enqueue(student1)
         
#       elif user_choice == 'b':
#         pass
#       elif user_choice == 'c':
#         MainMenu()
#         break
#       else:
#           print("PLEASE choose OPTION from menu (a,b or c) ")
class Stack:
  def __init__(self):
      self.items = []

  def is_empty(self):
      return self.items == []

  def push(self, item):
      self.items.append(item)

  def pop(self):
      return self.items.pop()

  def peek(self):
      return self.items[-1]

  def size(self):
      return len(self.items)
  
def EvaluateExpression(expression):
  
  def precedence(operator):
      if operator in ['+', '-']:
          return 1
      elif operator in ['*', '/']:
          return 2
      else:
          return 0

  def apply_operator(operators, numbers):
      operator = operators.pop()
      right_operand = numbers.pop()
      left_operand = numbers.pop()
      if operator == '+':
          numbers.push(left_operand + right_operand)
      elif operator == '-':
          numbers.push(left_operand - right_operand)
      elif operator == '*':
          numbers.push(left_operand * right_operand)
      elif operator == '/':
          numbers.push(left_operand / right_operand)

  numbers_stack = Stack()
  operators_stack = Stack()
  i = 0
  while i < len(expression):
      if expression[i].isdigit():
          number = 0
          while i < len(expression) and expression[i].isdigit():
              number = number * 10 + int(expression[i])
              i += 1
          numbers_stack.push(number)
      elif expression[i] in ['+', '-', '*', '/']:
          while (not operators_stack.is_empty() and
                 precedence(operators_stack.peek()) >= precedence(expression[i])):
              apply_operator(operators_stack, numbers_stack)
          operators_stack.push(expression[i])
          i += 1
      elif expression[i] == '(':
          operators_stack.push(expression[i])
          i += 1
      elif expression[i] == ')':
          while not operators_stack.is_empty() and operators_stack.peek() != '(':
              apply_operator(operators_stack, numbers_stack)
          operators_stack.pop()
          i += 1
      else:
          i += 1

  while not operators_stack.is_empty():
      apply_operator(operators_stack, numbers_stack)

  return numbers_stack.pop()
def Graph():
   print("a. Add vertex\nb. Add edge\nc. Remove vertex\nd. Remove edge\ne. Display vertices with a degree of X or more.\nf. Return to main menu")
   user_choice = input("Choose from the options above: ").lower()
   while True:
        if user_choice == 'a':
           AddVertex()
        elif user_choice =='b':
           AddEdge()
        elif user_choice =='c':
           RemoveVertex()
        elif user_choice == 'd':
            RemoveEdge()
        elif user_choice == 'e':
           DisplayVerticesDEgree()
        elif user_choice == 'f':
           MainMenu()
           break
        else:
           print("Please choose a letter from a to f")
           print("a. Add vertex\nb. Add edge\nc. Remove vertex\nd. Remove edge\ne. Display vertices with a degree of X or more.\nf. Return to main menu")
           user_choice = input("Choose from the options above: ").lower()
#Manin menu function        
def MainMenu():
   i=4
   while 0<i<= 4:
     print("1. Singly Linked List\n2. Check if Palindrome\n3. Priority Queue\n4. Evaluate an Infix Expression\n5. Graph\n6. Exit")
     #Ask user to choose number between 1 and 6
     user_choice = int(input("Choose an option from the menu by choosing number between 1 and 6: "))
     #looping user input 
     if 0 < user_choice <=6:
        if user_choice == 1:
           SinglyLinkedList()
           break
        elif user_choice == 2:
           string=input("Enter string to check if palindrome: ").replace(" ","")
           CheckIfPalindrome(string)
        elif user_choice == 3:
           PriorityQueue()
        elif user_choice == 4:
           expression = input("Enter expression to be solved: ")
           result = EvaluateExpression(expression)
           print("The result is : ",result)

        elif user_choice == 5:
           Graph()
        elif user_choice == 6:
           #Exit  the main menu
           #emoji code from(https://www.geeksforgeeks.org/python-program-to-print-emojis/)
           print("Goodbye, Have a nice day \U0001f600")
           break
     else:
        print("Please enter number between 1 and 6 (1-6):")
     i-=1
     print("Remaining attempts is " , i)
     
#The main function        
def main():
    #Ask user to enter his/her name
    User_name = input("Please, Enter your name: ")
    print("______Welcome, {}______\n".format(User_name))
    #Call MainMenu function
    MainMenu()

#Call main function to be executed
main()